/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public void markParent(TreeNode root, Map<TreeNode, TreeNode> parentTrack){
       
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()){
            TreeNode curr = q.poll();
            if(curr == null){
                return;
            }
            if(curr.left != null){
                parentTrack.put(curr.left, curr);
                q.offer(curr.left);
            }
            if(curr.right != null){
                parentTrack.put(curr.right, curr);
                q.offer(curr.right);
            }
        }
    }
    public TreeNode inorder(TreeNode root, int start){
        if(root == null){
            return null;
        }
        if(root.val == start){
            return root;
        }
        TreeNode left = inorder(root.left, start);
        if(left != null) return left;
        return inorder(root.right, start);
    }
    public int amountOfTime(TreeNode root, int start) {
        Map<TreeNode, TreeNode> parentTrack = new HashMap<>();
        markParent(root, parentTrack);
        Queue<TreeNode> q = new LinkedList<>();
        Map<TreeNode, Boolean> visited = new HashMap<>();
        //  first find infected element using any traversal method
        TreeNode infected = inorder(root, start);
        q.offer(infected);
        visited.put(infected, true);
        int time = 0;
        while(!q.isEmpty()){
            int size = q.size();
            time++;
            for(int i = 0; i < size; i++){
                TreeNode curr = q.poll();
                if(curr == null){
                    break;
                }
                if(curr.left != null && visited.get(curr.left) == null){
                    q.offer(curr.left);
                    visited.put(curr.left, true);
                }
                if(curr.right != null && visited.get(curr.right) == null){
                    q.offer(curr.right);
                    visited.put(curr.right, true);
                }
                if(parentTrack.get(curr) != null && visited.get(parentTrack.get(curr)) == null){
                    q.offer(parentTrack.get(curr));
                    visited.put(parentTrack.get(curr), true);
                }
            }
            
        }
        return time - 1;
    }
}
