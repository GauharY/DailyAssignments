/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    static class pair{
        TreeNode node;
        long idx;

        pair(TreeNode node, long idx){
            this.node = node;
            this.idx = idx;
        }

    }
    public int widthOfBinaryTree(TreeNode root) {
        if(root == null){
            return 0;
        }
        Queue<pair> q = new LinkedList<>();
        q.offer(new pair(root, 0));
        long max = 0;
        while(!q.isEmpty()){
            long first = q.peek().idx;
            long last = ((LinkedList<pair>) q).getLast().idx;
            int size = q.size();
            max = Math.max(max, last - first + 1);
            for(int i = 0; i < size; i++){
                pair currNode = q.poll();
                long index = currNode.idx;
                if(currNode.node.left != null){
                    q.offer(new pair(currNode.node.left, 2 * index + 1));
                }
                if(currNode.node.right != null){
                    q.offer(new pair(currNode.node.right, 2 * index + 2));
                }
            }
        }
        return (int)max;
    }
}
